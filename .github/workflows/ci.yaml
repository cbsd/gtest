name: "Run builds"
on:
  workflow_dispatch:
    inputs:
      arch:
        description: "architecture to build for"
        required: true
        default: "amd64"
      version:
        description: |
          The new version string used for the OS image.
          This should generally follow the pattern "(alpha|beta|stable|lts)-MMMM.m.p[-suffix]".
          A tag using this version string will be added to the scripts repo.
          The commit will include an updated 'version.txt' as well as updated ebuild submodules (see below).
          Using a version with the pattern (alpha|beta|stable|lts)-MMMM.m.p (e.g. alpha-2342.0.0)
          will create an official build; use a suffix for dev builds (e.g. alpha-3234.0.0-testbuild-thilo-1234).
        required: true
        default: "alpha-3204.0.0-nightly"
      image_formats:
        description: |
          Space-separated vendor formats to build.
        required: true
        default: qemu_uefi


permissions:
  packages: write


jobs:
  packages:
    name: "Build Flatcar packages"
    runs-on: self-hosted
    defaults:
      run:
        working-directory: scripts

    steps:
      - uses: actions/checkout@v2
        with:
          path: scripts
          fetch-depth: 0

      - name: Free disk space
        shell: bash
        run: |
          # The github runner has tons of tools and libraries pre-installed.
          # Most of that, we don't need. What we do need is plenty of space.
          # Free up around 30 GB.
          sudo rm -rf /home/linuxbrew/.linuxbrew
          sudo rm -rf /home/runner/.cargo
          sudo rm -rf /home/runner/.rustup
          sudo rm -rf /home/runneradmin/.dotnet
          sudo rm -rf /opt/mssql*
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /opt/google
          sudo rm -rf /opt/az
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/share/swift
      - name: Prepare machine
        shell: bash
        run: |
          sudo rm /bin/sh
          sudo ln -s /bin/bash /bin/sh
          sudo usermod -a -G docker $USER
          #git submodule update --init --recursive

      - name: Build packages
        shell: bash
        run: |
          exec 2>&1
          set +x
          source ci-automation/packages.sh
          packages_build "${{ github.event.inputs.version }}" "${{ github.event.inputs.arch }}"
          df -h

      - name: Buils image
        shell: bash
        run: |
          exec 2>&1
          source ci-automation/image.sh
          image_build "${{ github.event.inputs.arch }}"
          df -h

      - name: VM image build
        shell: bash
        run: |
          exec 2>&1
          source ci-automation/vms.sh
          vm_build "${{ github.event.inputs.arch }}" ${{ github.event.inputs.image_formats }}
          df -h
          tree -L 3 images/
